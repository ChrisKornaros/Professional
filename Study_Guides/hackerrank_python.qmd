# Study Guide for Python Technical Interviews
## HackerRank
### Easy
#### Template
**Description:** 


**Solution:** 
```python

```

**Explanation:**

- Need to add explanation

#### Say "Hello, World" with Python

**Description:** Print "Hello, world"

**Solution:**
```python
if __name__ == '__main__':
    print("Hello, World")
```

**Explanation:**

- This is a simple solution that prints "Hello, World" using Python's basic `print()` function

#### Python If-Else

**Description:** 
Task
Given an integer, *n*, perform the following conditional actions:

If *n* is odd, print Weird
If *n* is even and in the inclusive range of 2 to 5, print Not Weird
If *n* is even and in the inclusive range of 6 to 20, print Weird
If *n* is even and greater than 20, print Not Weird

Input Format:

A single line containing a positive integer, *n*.

**Solution:** 
```python
#!/bin/python3

import math
import os
import random
import re
import sys

if __name__ == '__main__':
    n = int(input().strip())
    
    if n % 2 != 0:
        print("Weird")
    elif n % 2 == 0 and 2 <= n <= 5:
        print("Not Weird")
    elif n % 2 == 0 and 6 <= n <= 20:
        print("Weird")
    else:
        print("Not Weird")
```

**Explanation:**

- Need to add explanation

#### Arithmetic Operators

**Description:** 
The provided code stub reads two integers from STDIN, *a* and *b*. Add code to print three lines where:

1. The first line contains the sum of the two numbers.
2. The second line contains the difference of the two numbers (first - second).
3. The third line contains the product of the two numbers.

**Solution:** 
```python
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    
    print(a + b)
    print(a - b)
    print(a * b)
```

**Explanation:**

- Need to add explanation

#### Python: Division

**Description:** 
The provided code stub reads two integers, *a* and *b*, from STDIN.

Add logic to print two lines. The first line should contain the result of integer division,
*a* // *b*. The second line should contain the result of float division, *a* / *b*.

No rounding or formatting is necessary.

**Solution:** 
```python
if __name__ == '__main__':
    a = int(input())
    b = int(input())
    
    print(a // b)
    print(a / b)
```

**Explanation:**

- Need to add explanation

#### Loops

**Description:** 
The provided code stub reads an integer, *n*, from STDIN. For all non-negative integers *i* < *n*, print *i^2^*. 

**Solution:** 
```python
if __name__ == '__main__':
    n = int(input())
    
    for i in range(0, n):
        print(i * i)
```

**Explanation:**

- Need to add explanation


#### Print Function

**Description:** 
The included code stub will read an integer, *n*, from STDIN.

Without using any string methods, try to print the following:

123 *** *n*

Note that "***" represents the consecutive values in between.

**Solution:** 
```python
if __name__ == '__main__':
    n = int(input())
    
    for i in range(1, n+1):
        print(i, end="")
```


**Explanation:**

- Need to add explanation


#### List Comprehensions

**Description:** 
Let's learn about list comprehensions! You are given three integers *x*, *y*, and *z* representing the dimensions of a cuboid along with an integer *n*. Print a list of all possible coordinates given by (*i*,*j*,*k*) on a 3D grid where the sum of *i*+*j*+*k* is not equal to *n*. Here, `0 <= *i* <= *x*; 0 <= *j* <= *y*; 0 <= *k* <= *z`*. Please use list comprehensions rather than multiple loops, as a learning exercise. 

**Solution:** 
```python
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    
    print ([[a,b,c] for a in range(0, x+1) for b in range(0,y+1) for c in range(0,z+1) if a + b + c != n ])
```

**Explanation:**

- Need to add explanation


#### Find the Runner Up Score

**Description:** 
Given the participants' score sheet for your University Sports Day, you are required to find the runner-up score. You are given scores. Store them in a list and find the score of the runner-up. 

The first line contains *n*. The second line contains an array *A*[] of *n* integers each separated by a space. 

**Solution:** 
```python
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
    
    srr = set(arr)
    sor = sorted(srr)
    
    print(sor[-2])
```


**Explanation:**

- Need to add explanation


#### Nested Lists

**Description:** 
Given the names and grades for each student in a class of *N* students, store them in a nested list and print the name(s) of any student(s) having the second lowest grade. ***Note:*** If there are multiple students with the second lowest grade, order their names alphabetically and print each name on a new line.

**Solution:** 
```python
if __name__ == '__main__':
    raw = []
    
    for _ in range(int(input())):
        name = input()
        score = float(input())
        raw.append([name, score])
    
    raw_sort = sorted(raw, key=lambda x: x[1])
    
    low_score = raw_sort[0][1]
    
    second_low = None
    for n, s in raw_sort:
        if s > low_score:
            second_low = s
            break
    
    answer = sorted([name for name, score in raw if score == second_low])

    for n in answer:
        print(n)
```

**Explanation:**

- Need to add explanation


#### What's Your Name?

**Description:** 
You are given the firstname and lastname of a person on two different lines. Your task is to read them and print the following:

Hello `firstname` `lastname`! You just delved into python.

*Function Description*

Complete the print_full_name function in the editor below.

`print_full_name()` has the following parameters:

`string first: the first name`
`string last: the last name`


**Solution:** 
```python
def print_full_name(first, last):
    # Write your code here
    print(f"Hello {first} {last}! You just delved into python.")

if __name__ == '__main__':
    first_name = input()
    last_name = input()
    print_full_name(first_name, last_name)
```

**Explanation:**

- Need to add explanation


#### re.start() & re.end()

**Description:** 

You are given a string *S*.
Your task is to find the indices of the start and end of string *k* in *S*.

Input Format

The first line contains the string *S*.
The second line contains the string *k*.

**Solution:** 
```python
# Enter your code here. Read input from STDIN. Print output to STDOUT
import re

S = input()
k = input()

pattern = re.compile(k)
r = pattern.search(S)
if not r: print("(-1, -1)")
while r:
    print("({0}, {1})".format(r.start(), r.end() - 1))
    r = pattern.search(S,r.start() + 1)
```

**Explanation:**

- Need to add explanation

#### Finding the percentage

**Description:** 

The provided code stub will read in a dictionary containing key/value pairs of name:[marks] for a list of students. Print the average of the marks array for the student name provided, showing 2 places after the decimal. 

The first line contains the integer *n*, the number of students' records. The next *n* lines contain the names and marks obtained by a student, each value separated by a space. The final line contains ***query_name***, the name of a student to query.

**Solution:** 
```python

```

**Explanation:**

- Need to add explanation

#### Lists

**Description:** 

Consider a list (list = []). You can perform the following commands:

1. `insert i e`: Insert integer *e* at position *i*.
2. `print`: Print the list.
3. `remove e`: Delete the first occurrence of integer *e*.
4. `append e`: Insert integer *e* at the end of the list.
5. `sort`: Sort the list.
6. `pop`: Pop the last element from the list.
7. `reverse`: Reverse the list.

Initialize your list and read in the value of *n* followed by *n* lines of commands where each command will be of the types listed above. Iterate through each command in order and perform the corresponding operation on your list. 

**Solution:** 
```python

```

**Explanation:**

- Need to add explanation

#### Tuples

**Description:** 

Given an integer, *n*, and *n* space-separated integers as input, create a tuple, *t*, of those integers. Then compute and print the result of `hash(t)`. ***Note:*** hash() is one of the functions in the __builtins__ module, so it need not be imported.

Input Format

The first line contains an integer, *n*, denoting the number of elements in the tuple.
The second line contains space-separated integers describing the elements in tuple *t*. 

**Solution:** 
```python
if __name__ == '__main__':
    n = int(input())
    integer_list = map(int, input().split())
    
    t = tuple(integer_list)
    
    print(hash(t))
```

**Explanation:**

- Need to add explanation

#### sWAP cASE

**Description:** 

You are given a string and your task is to swap cases. In other words, convert all lowercase letters to uppercase letters and vice versa.

**Solution:** 
```python
def swap_case(s):
    return s.swapcase()

if __name__ == '__main__':
    s = input()
    result = swap_case(s)
    print(result)
```

**Explanation:**

- Need to add explanation

#### String Split and Join

**Description:** 

You are given a string. Split the string on a " " (space) delimiter and join using a - hyphen. 

**Solution:** 
```python
def split_and_join(line):
    # write your code here
    out = line.split(" ")
    out = "-".join(out)
    return out

if __name__ == '__main__':
    line = input()
    result = split_and_join(line)
    print(result)
```

**Explanation:**

- Need to add explanation

#### Mutations

**Description:** 

We have seen that lists are mutable (they can be changed), and tuples are immutable (they cannot be changed).

You are given an immutable string, and you want to make changes to it. 

Read a given string, change the character at a given index and then print the modified string.

Function Description

Complete the mutate_string function in the editor below.

mutate_string has the following parameters:

`string string`: the string to change
`int position`: the index to insert the character at
`string character`: the character to insert


**Solution:** 
```python
def mutate_string(string, position, character):
    string = string[:position] + character + string[position+1:]
    return string

if __name__ == '__main__':
    s = input()
    i, c = input().split()
    s_new = mutate_string(s, int(i), c)
    print(s_new)
```

**Explanation:**

- Need to add explanation

#### Find a String

**Description:** 

In this challenge, the user enters a string and a substring. You have to print the number of times that the substring occurs in the given string. String traversal will take place from left to right, not from right to left.

NOTE: String letters are case-sensitive.

**Solution:** 
```python
def count_substring(string, sub_string):
    sub_len = len(sub_string)
    cnt = 0
    
    for i in range(len(string) - sub_len + 1):
        if string[i:i + sub_len] == sub_string:
            cnt += 1
        
    return cnt

if __name__ == '__main__':
    string = input().strip()
    sub_string = input().strip()
    
    count = count_substring(string, sub_string)
    print(count)
```

**Explanation:**

- Need to add explanation

#### String Validators

**Description:** 

You are given a string *S*.

Your task is to find out if the string *S* contains: alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters. 

**Solution:** 
```python
if __name__ == '__main__':
    s = input()
    a = False
    b = False
    c = False
    d = False
    e = False
    
    for i in s:
        if i.isalnum():
            a = True
        if i.isalpha():
            b = True
        if i.isdigit():
            c = True
        if i.islower():
            d = True
        if i.isupper():
            e = True
    
    print(f"{a}\n{b}\n{c}\n{d}\n{e}\n")
```

**Explanation:**

- Inelegant, but it works
- Need to add explanation

#### Text Alignment

**Description:** 

You are given a partial code that is used for generating the HackerRank Logo of variable thickness.
Your task is to replace the blank (______) with rjust, ljust or center.

**Solution:** 
```python
#Replace all ______ with rjust, ljust or center. 

thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))

#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))

#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    

#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    

#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))
```

**Explanation:**

- Need to add explanation

#### Text Wrap

**Description:** 

You are given a string *S* and width *w*.
Your task is to wrap the string *S* into a paragraph of width *w*.

Function Description

Complete the wrap function in the editor below.

wrap has the following parameters:

`string string`: a long string
`int max_width`: the width to wrap to

Returns

`string`: a single string with newline characters ('\n') where the breaks should be


**Solution:** 
```python
import textwrap

def wrap(string, max_width):
    out = textwrap.fill(string, width=max_width)
    return out
```

**Explanation:**

- Need to add explanation

#### Capitalize!
**Description:** 

You are asked to ensure that the first and last names of people begin with a capital letter in their passports. For example, alison heck should be capitalised correctly as Alison Heck.

Given a full name, your task is to capitalize the name appropriately.

**Solution:** 
```python
# Complete the solve function below.
def solve(s):
    for x in s[:].split():
        s = s.replace(x, x.capitalize())
    return s
```

**Explanation:**

- We just want to capitalise first letter of each word, not the first occuring letter of a word. 
- `s.title()` would capitalize the first occuring letter of each word
- Need to add explanation

#### Template
**Description:** 


**Solution:** 
```python

```

**Explanation:**

- Need to add explanation
